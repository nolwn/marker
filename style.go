package marker

import "fmt"

const esc = "\x1b"    // escape
const csi = esc + "[" // control sequence introducer

// Styles and Reset
const (
	Reset = iota
	Bold
	Dim
	Italic
	Underline
	Blinking
	_
	Inverse
	Hidden
	Strikethrough
)

// Color number values. These correspond to the foreground colors, but can be made into
// background colors just by adding 10 which is done automatically by the Background
// method.
const (
	Black = iota + 30
	Red
	Green
	Yellow
	Blue
	Magenta
	Cyan
	White
	_
	Default // Default resets colors
)

// Bright color number values. These correspond to the foreground colors, but can be
// made into background colors just by adding 10 which is done automatically by the
// Background method.
const (
	BrtBlack = iota + Black + 60
	BrtRed
	BrtGreen
	BrtYellow
	BrtBlue
	BrtMagenta
	BrtCyan
	BrtWhite
)

type style struct {
	background int8
	color      int8
	effect     int8
}

// Style returns a style type that can be used to generate ansi escape codes. The style
// type implements fmt.Stringer, which will returns the ansi code that was constructed.
func Style() *style {
	return &style{}
}

// Color take a color value and sets it as the color of the text. The color value is
// expected to correspond to the actual escape code value for that color and, since
// no one wants to have to remember that, the programmer is expected to use one of the
// provided const values.
//
// If a value falls outside of the expected range, nothing will be set and the passed
// value will be ignored.
func (s *style) Color(c int8) *style {
	if c >= Black && c <= White {
		s.color = c
	} else if c >= BrtBlack && c <= BrtWhite {
		s.color = c
	} else if c == Default {
		s.color = c
	}

	return s
}

// Background takes a color value and sets it as the color of the text. The color value
// is expected to correspond to the actual escape code value for that color as a
// foreground color. Background will convert that value to a background color
// automatically. Since no one wants to have to remember those values, the programmer is
// expected to use one of the provided const values.
//
// If a value falls outside of the expected range, nothing will be set and the passed
// value will be ignored.
func (s *style) Background(c int8) *style {
	if c >= Black && c <= White {
		s.background = c + 10
	} else if c >= BrtBlack && c <= BrtWhite {
		s.background = c + 10
	} else if s.color == Default {
		s.background = c + 10
	}

	return s
}

// Effect takes an effect value and sets it as the text effect. The effect value is
// expected to correspond to the actual escape cade value for that effect. Since no one
// wants to remember those values, the programmer is expected to use one of the provided
// const values.
//
// If a value falls outside of the expected range, nothing will be set and the passed
// value will be ignored.
func (s *style) Effect(e int8) *style {

	// between Reset and Strikethrough, but not 6 (since that value's skipped)
	if e >= Bold && e <= Strikethrough && e != 6 {
		s.effect = e
	}

	return s
}

// String satisfies the fmt.Stringer method and allows the style type to be passed as a
// string to fmt function. The resulting string will be the escape code value that was
// generated by previous method calls.
func (c *style) String() string {
	codes := ""

	if c.background != 0 {
		codes = appendCode(codes, fmt.Sprint(c.background))
	}

	if c.color != 0 {
		codes = appendCode(codes, fmt.Sprint(c.color))
	}

	if c.effect != 0 {
		codes = appendCode(codes, fmt.Sprint(c.effect))
	}

	return fmt.Sprintf("%s%sm", csi, codes)
}

// appendCode takes a string of code(s) separated by ;'s and another code and appends it
// with a ; separating it.
func appendCode(codes string, code string) string {
	if len(codes) == 0 {
		return code
	} else {
		return fmt.Sprintf("%s;%s", codes, code)
	}
}
